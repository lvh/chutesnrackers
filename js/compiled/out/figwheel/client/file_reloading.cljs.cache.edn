;; Analyzed by ClojureScript 0.0-2755
{:defs {add-link-to-doc {:protocol-inline nil, :name figwheel.client.file-reloading/add-link-to-doc, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([new-link] [orig-link klone]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-link] [orig-link klone])), :test true}, matches-file? {:protocol-inline nil, :name figwheel.client.file-reloading/matches-file?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 21, :method-params ([p__27248 link-href]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [file request-url]} link-href])), :test true}, add-request-urls {:protocol-inline nil, :name figwheel.client.file-reloading/add-request-urls, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([opts files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts files])), :test true}, figwheel-closure-import-script {:protocol-inline nil, :name figwheel.client.file-reloading/figwheel-closure-import-script, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 38, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src])), :test true}, current-links {:protocol-inline nil, :name figwheel.client.file-reloading/current-links, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reload-css-files {:protocol-inline nil, :name figwheel.client.file-reloading/reload-css-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([p__27286 files-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [on-cssload], :as opts} files-msg])), :test true}, add-cache-buster {:protocol-inline nil, :name figwheel.client.file-reloading/add-cache-buster, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, get-correct-link {:protocol-inline nil, :name figwheel.client.file-reloading/get-correct-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([f-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f-data])), :test true}, js-reload {:protocol-inline nil, :name figwheel.client.file-reloading/js-reload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 17, :method-params ([p__27120 callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [request-url namespace dependency-file meta-data], :as msg} callback])), :test true}, truncate-url {:protocol-inline nil, :name figwheel.client.file-reloading/truncate-url, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 20, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, clone-link {:protocol-inline nil, :name figwheel.client.file-reloading/clone-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 18, :method-params ([link url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([link url])), :test true}, add-request-url {:protocol-inline nil, :name figwheel.client.file-reloading/add-request-url, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__27123 p__27124]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [url-rewriter], :as opts} {:keys [file], :as d}])), :test true}, patch-goog-base {:protocol-inline nil, :name figwheel.client.file-reloading/patch-goog-base, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reload-host {:protocol-inline nil, :name figwheel.client.file-reloading/reload-host, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 19, :method-params ([p__27117]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [websocket-url]}])), :test true}, reload-css-file {:protocol-inline nil, :name figwheel.client.file-reloading/reload-css-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__27283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core.async.impl.channels/ManyToManyChannel any}, :variadic false, :max-fixed-arity 1}), :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [file request-url], :as f-data}])), :test true}, resolve-ns {:protocol-inline nil, :name figwheel.client.file-reloading/resolve-ns, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 18, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :test true}, reload-js-file {:protocol-inline nil, :name figwheel.client.file-reloading/reload-js-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 22, :method-params ([file-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-msg])), :test true}, ns-meta-data {:file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :line 38, :column 1, :end-line 38, :end-column 23, :test true, :name figwheel.client.file-reloading/ns-meta-data}, load-all-js-files {:protocol-inline nil, :name figwheel.client.file-reloading/load-all-js-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 25, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :doc "Returns a chanel with one collection of loaded filenames on it.", :test true}, create-link {:protocol-inline nil, :name figwheel.client.file-reloading/create-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 19, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, reload-js-files {:protocol-inline nil, :name figwheel.client.file-reloading/reload-js-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__27130 p__27131]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [before-jsload on-jsload], :as opts} {:keys [files], :as msg}])), :test true}, get-meta-data-for-ns {:protocol-inline nil, :name figwheel.client.file-reloading/get-meta-data-for-ns, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 28, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :test true}}, :name figwheel.client.file-reloading, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, alts! cljs.core.async, map< cljs.core.async, put! cljs.core.async}, :requires {async cljs.core.async, cljs.core.async cljs.core.async, string clojure.string, clojure.string clojure.string, loader goog.net.jsloader, goog.net.jsloader goog.net.jsloader, goog.string goog.string, goog.Uri goog.Uri, guri goog.Uri}, :imports nil}